import com.intellij.database.model.DasColumn
import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

/*
 * Available context bindings:
 *   SELECTION   Iterable<DasObject>
 *   PROJECT     project
 *   FILES       files helper
 */

packageName = "com.sample;"
typeMapping = [
        (~/(?i)tinyint/)                     : "boolean",
        (~/(?i)bigint/)                      : "long",
        (~/(?i)int/)                         : "int",
        (~/(?i)float|double|decimal|real/)   : "double",
        (~/(?i)datetime|timestamp|date|time/): "Date",
        (~/(?i)/)                            : "String"
]


rsGetTypeMapping = [
        (~/(?i)tinyint/)                            : "Boolean",
        (~/(?i)bigint/)                             : "Long",
        (~/(?i)int/)                                : "Int",
        (~/(?i)float|double|decimal|real/)          : "Double",
        (~/(?i)datetime|timestamp|time/)            : "Timestamp",
        (~/(?i)date/)                               : "Date",
        (~/(?i)/)                                   : "String"
]


FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
    SELECTION.filter { it instanceof DasTable }.each { generate(it, dir) }
}

def generate(table, dir) {
    def tableName = table.getName()
    def className = javaName(tableName, true)
    if(className.endsWith("ies")) className = className.substring(0,className.length()-3)+"y" //replace final "ies" with "y"
    else if(className.endsWith("ses")) className = className.substring(0,className.length()-3)+"sis" //replace final ses by sis analysis -> analyses
    else if(className.endsWith("oes")) className = className.substring(0,className.length()-2) //shoes -> shoe papatoes -> patato
    else if(className.endsWith("ves")) className = className.substring(0,className.length()-3)+"f" //wife->wives, wolf->wolves
    else if(className.endsWith("es")) className = className.substring(0,className.length()-2) //remove final es class-> classes
    else if(className.endsWith("s")) className = className.substring(0,className.length()-1) //remove final s

    def fields = calcFields(table)
    new File(dir, className + "Dao.java").withPrintWriter { out -> generate(out, className, tableName, fields) }
}


def generate(out, className, tableName, fields) {
    out.println "package $packageName"
    out.println ""
    out.println "import java.sql.*;"
    out.println ""
    out.println "public class ${className}Dao {"
    out.println ""
    out.println "private static final Logger logger = Logger.getLogger(${className}Dao.class.getName());"

    generateMapResultSet(out, className, fields)
    out.println ""

    generateCreate(out, className, tableName, fields)
    out.println ""

    out.println "}"
}

def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col ->
        def spec = Case.LOWER.apply(col.getDasType().getSpecification())

        def isAuto = DasUtil.isAutoGenerated(col);
        def isPrimary = DasUtil.isPrimary(col);

        def isNullable = !col.isNotNull();
        def typeRsGetStr = rsGetTypeMapping.find { p, t -> p.matcher(spec).find() }.value
        def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
        if(isNullable) typeStr = typeStr.capitalize()
        fields += [[
                           name : javaName(col.getName(), false),
                           type : typeStr,
                           typeRsGet : typeRsGetStr,
                           isNullable: isNullable,
                           isAuto: isAuto,
                            spec: spec,
                           isPrimary: isPrimary,
                           col: col,
                           annos: ""]]
    }
}

def javaName(str, capitalize) {
    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
            .collect { Case.LOWER.apply(it).capitalize() }
            .join("")
            .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, "_")
    capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]
}


def generateMapResultSet(out, className, fields) {

    out.println "\tprivate static ${className} mapResultSet(ResultSet rs) throws SQLException"
    out.println "\t{"
    out.println "\t\t${className} obj = new ${className}(); "

    fields.each() {
        out.println "\t\tobj.set${it.name.capitalize()}(rs.get${it.typeRsGet}(\"${it.col.getName()}\")); //${it.spec}"
        if(it.isNullable && !"String".equals(it.typeRsGet)) out.println "\t\tif(rs.wasNull()) obj.set${it.name.capitalize()}(null); //${it.spec}"
    }

    out.println "\t\treturn obj; "
    out.println "\t}"

}


/*
    public static Item create(Item item) throws SQLException
    {
        String query = " INSERT INTO items VALUES (?,?,?,?,?,?,?,?,?,'EUR',NOW(),NOW()) " ;
        Connection conn = null ;
        PreparedStatement stmt = null ;

        int i=1;
        try
        {
            conn =  getConnection();
            stmt = conn.prepareStatement(query , Statement.RETURN_GENERATED_KEYS);
            stmt.setNull(i++, Types.NULL);
            stmt.setLong(i++,item.getUserId());
            stmt.setString(i++,item.getName());
            stmt.setString(i++,item.getDescription());
            stmt.setString(i++,item.getType());
            stmt.setInt(i++,item.getUnitSellingPriceX100InclVat());
            if(item.getUnitPurchasePriceX100InclVat()!=null) stmt.setInt(i++,item.getUnitPurchasePriceX100InclVat());
            else stmt.setNull(i++,Types.NULL);
            if(item.getDefaultPercentVat()!=null) stmt.setInt(i++,item.getDefaultPercentVat());
            else stmt.setNull(i++,Types.NULL);
            if(item.getCoeffMarginX100()!=null) stmt.setInt(i++,item.getCoeffMarginX100());
            else stmt.setNull(i++,Types.NULL);

            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();

            item.setId(rs.getLong(1));

            return item;

        }
        catch (SQLException e)
        {
            if (stmt != null) logger.log(Level.SEVERE, stmt.toString());
            e.printStackTrace();
            throw e;
        }
        finally
        {
            if (conn != null)
            {
                try
                {
                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
    }
 */

def generateCreate(out, className, tableName, fields) {

    out.println "\tpublic static ${className} create(${className} obj) throws SQLException"


    def query = "";
    def hasPrimaryKeyAutogenerated = false;
    def memoAutoGeneratedKeySetter = null;
    def memoAutoGeneratedKeyRank = -1;
    for(int i=0;i<fields.size();i++) {
        def field = fields.get(i);
        if(field.isPrimary && field.isAuto)
        {
            hasPrimaryKeyAutogenerated = true
            memoAutoGeneratedKeyRank = i+1;
        };
        if(i==0) query += "?"
        else query += ",?"
    }

    out.println "\t{"
    out.println "\t\tString query = \" INSERT INTO "+tableName+" VALUES ("+query+") \"; "
    out.println "        Connection conn = null ;\n" +
            "        PreparedStatement stmt = null ;\n" +
            "\n" +
            "        int i=1;\n" +
            "        try\n" +
            "        {\n" +
            "            conn =  getConnection();\n"

    if(hasPrimaryKeyAutogenerated)
        out.println       "            stmt = conn.prepareStatement(query , Statement.RETURN_GENERATED_KEYS);\n"
    else  out.println     "            stmt = conn.prepareStatement(query);\n"

    fields.each() {

        def stmtSet = "stmt.set${it.typeRsGet}(i++,obj.get${it.name.capitalize()}()); //${it.spec}";
        if(it.typeRsGet.equals("Date")||it.typeRsGet.equals("Timestamp")) stmtSet = "stmt.set${it.typeRsGet}(i++,new java.sql.${it.typeRsGet}(obj.get${it.name.capitalize()}().getTime())); //${it.spec}";
        
        if(it.isPrimary && it.isAuto)
        {
            out.println "\t\tstmt.setNull(i++, Types.NULL); //${it.name} primary key and autogenerated"
            memoAutoGeneratedKeySetter = "obj.set${it.name.capitalize()}(rs.get${it.typeRsGet}("+memoAutoGeneratedKeyRank+"));"
        }
        else if(it.isNullable && !"String".equals(it.typeRsGet))
        {
            out.println "\tif(obj.get${it.name.capitalize()}()!=null) "+stmtSet
            out.println "\telse stmt.setNull(i++,Types.NULL);";
        }
        else
        {
            out.println "\t"+stmtSet
        }
    }


    out.println "stmt.executeUpdate();\n"

    if(hasPrimaryKeyAutogenerated)
    {
      out.println "            ResultSet rs = stmt.getGeneratedKeys();\n" +
              "            rs.next();\n" +
              "            "+memoAutoGeneratedKeySetter; //kinda obj.setId(rs.getLong(1));
    }

    out.println         "            return obj;"
    out.println "\t}        " +
            "        catch (SQLException e)\n" +
            "        {\n" +
            "            e.printStackTrace();\n" +
            "            throw e;\n" +
            "        }\n" +
            "        finally\n" +
            "        {\n" +
            "            if (conn != null)\n" +
            "            {\n" +
            "                try\n" +
            "                {\n" +
            "                    conn.close();\n" +
            "                }\n" +
            "                catch (Exception e)\n" +
            "                {\n" +
            "                    e.printStackTrace();\n" +
            "                }\n" +
            "            }\n" +
            "        }" +
            " }"

}